'''
ANALISIS RED ELÉCTRICA DE ALEMANIA
'''

import pandas as pd
import numpy as np
from collections import Counter

vertices = pd.read_csv('Vertices.csv', delimiter = ',')
enlaces = pd.read_csv('Enlaces.csv')


' PREPROCESAMIENTO DE DATOS '

#ENLACES

enlaces_aux = enlaces.iloc[:,0]
size = len(enlaces_aux)
for i in range(size):
    enlaces_aux[i] = enlaces_aux[i].split(',')
long = len(enlaces_aux[1])
info_e = []
for i in range(len(enlaces_aux)):
    inf = []
    info_e.append(inf)
    for p in range(long):
        inf.append(enlaces_aux[i][p])

cab_e = []
for columns in enlaces:
    cab_e.append(columns)

ce0 = []
ce1 = []
ce2 = []
ce3 = []
ce4 = []
ce5 = []
ce6 = []
ce7 = []
ce8 = []
ce9 = []
ce10 = []
ce11 = []
ce12 = []
ce13 = []
ce14 = []
ce15 = []
ce16 = []

for i in range(len(enlaces_aux)):
    for p in range(long):
        if p == 0:
            ce0.append(info_e[i][p])
        if p == 1:
            ce1.append(info_e[i][p])
        if p == 2:
            ce2.append(info_e[i][p])
        if p == 3:
            ce3.append(info_e[i][p])
        if p == 4:
            ce4.append(info_e[i][p])
        if p == 5:
            ce5.append(info_e[i][p])
        if p == 6:
            ce6.append(info_e[i][p])
        if p == 7:
            ce7.append(info_e[i][p])
        if p == 8:
            ce8.append(info_e[i][p])
        if p == 9:
            ce9.append(info_e[i][p])
        if p == 10:
            ce10.append(info_e[i][p])
        if p == 11:
            ce11.append(info_e[i][p])
        if p == 12:
            ce12.append(info_e[i][p])
        if p == 13:
            ce13.append(info_e[i][p])
        if p == 14:
            ce14.append(info_e[i][p])
        if p == 15:
            ce15.append(info_e[i][p])
        if p == 16:
            ce16.append(info_e[i][p])

enlaces_def = pd.DataFrame({ cab_e[0] : ce0,
                              cab_e[1] : ce1,
                              cab_e[2] : ce2,
                              cab_e[3] : ce3,
                              cab_e[4] : ce4,
                              cab_e[5] : ce5,
                              cab_e[6] : ce6,
                              cab_e[7] : ce7,
                              cab_e[8] : ce8,
                              cab_e[9] : ce9,
                              cab_e[10] : ce10,
                              cab_e[11] : ce11,
                              cab_e[12] : ce12,
                              cab_e[13] : ce13,
                              cab_e[14] : ce14,
                              cab_e[15] : ce15,
                              cab_e[16] : ce16
                              })


#VERTICES

vertices_aux = vertices.iloc[:,0]
size = len(vertices_aux)
for i in range(size):
    vertices_aux[i] = vertices_aux[i].split(',')
long = len(vertices_aux[1])
info_v = []
for i in range(len(vertices_aux)):
    inf = []
    info_v.append(inf)
    for p in range(long):
        inf.append(vertices_aux[i][p])
        
cab_v = []
for columns in vertices:
    cab_v.append(columns)

cv0 = []
cv1 = []
cv2 = []
cv3 = []
cv4 = []
cv5 = []
cv6 = []
cv7 = []
cv8 = []
cv9 = []

for i in range(len(vertices_aux)):
    for p in range(long):
        if p == 0:
            cv0.append(info_v[i][p])
        if p == 1:
            cv1.append(info_v[i][p])
        if p == 2:
            cv2.append(info_v[i][p])
        if p == 3:
            cv3.append(info_v[i][p])
        if p == 4:
            cv4.append(info_v[i][p])
        if p == 5:
            cv5.append(info_v[i][p])
        if p == 6:
            cv6.append(info_v[i][p])
        if p == 7:
            cv7.append(info_v[i][p])
        if p == 8:
            cv8.append(info_v[i][p])
        if p == 9:
            cv9.append(info_v[i][p])

vertices_def = pd.DataFrame({ cab_v[0] : cv0,
                              cab_v[1] : cv1,
                              cab_v[2] : cv2,
                              cab_v[3] : cv3,
                              cab_v[4] : cv4,
                              cab_v[5] : cv5,
                              cab_v[6] : cv6,
                              cab_v[7] : cv7,
                              cab_v[8] : cv8,
                              cab_v[9] : cv9
                              })


'''
CREACION DE LA RED
'''

import networkx as nx
import matplotlib.pyplot as plt
import seaborn as sns
import statistics


G = nx.Graph()

nodos = []
nodos = list(vertices_def.iloc[:,0])
i = 0
for i in range(len(nodos)):
    G.add_node(int(nodos[i]))
enlaces = []
for i in range(len(enlaces_def)):
    enlaces.append((int(enlaces_def.iloc[i,1]), int(enlaces_def.iloc[i,2])))
i = 0
a = []
for item in enlaces:
    if item not in a:
        a.append(item)
for i in range(len(a)):
    G.add_edge(a[i][0], a[i][1])
    

#PARAMETROS DE LA RED

G_size = G.number_of_nodes()
G_edges = G.number_of_edges()
degree_sequence = sorted((d for n, d in G.degree()), reverse=True)
mean_degree = statistics.mean(degree_sequence)
Numero_Componentes = nx.number_connected_components(G)
D_G = nx.diameter(G)

Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])
Gcc_size = Gcc.number_of_nodes()
Gcc_edges = Gcc.number_of_edges()
degree_sequence_Gcc = sorted((d for n, d in Gcc.degree()), reverse=True)
mean_degree_Gcc = statistics.mean(degree_sequence_Gcc)
D_Gcc = nx.diameter(Gcc)



'''PLOT DEGREE'''

#GRAFO COMPLETO

degree_sequence = sorted((d for n, d in G.degree()), reverse=True)
dmax = max(degree_sequence)

fig = plt.figure("Degree of a random graph", figsize=(16, 16))
# Create a gridspec for adding subplots of different sizes
axgrid = fig.add_gridspec(5, 4)

ax0 = fig.add_subplot(axgrid[0:3, :])
pos = nx.spring_layout(G, seed=10396953)
nx.draw_networkx_nodes(G, pos, ax=ax0, node_size=10)
nx.draw_networkx_edges(G, pos, ax=ax0, alpha=0.4)
ax0.set_title("All components of G")
ax0.set_axis_off()

ax1 = fig.add_subplot(axgrid[3:, :2])
ax1.plot(degree_sequence, "b-", marker="o")
ax1.set_title("Degree Rank Plot")
ax1.set_ylabel("Degree")
ax1.set_xlabel("Rank")

ax2 = fig.add_subplot(axgrid[3:, 2:])
ax2.bar(*np.unique(degree_sequence, return_counts=True))
ax2.set_title("Degree histogram")
ax2.set_xlabel("Degree")
ax2.set_ylabel("Number of Nodes")

fig.tight_layout()
plt.show()


#COMPONENTE GIGANTE

Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])

degree_sequence = sorted((d for n, d in Gcc.degree()), reverse=True)
dmax = max(degree_sequence)

fig = plt.figure("Degree of a random graph", figsize=(16, 16))
# Create a gridspec for adding subplots of different sizes
axgrid = fig.add_gridspec(5, 4)

ax0 = fig.add_subplot(axgrid[0:3, :])
pos = nx.spring_layout(Gcc, seed=17)
nx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=10)
nx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)
ax0.set_title("Connected components of G")
ax0.set_axis_off()

ax1 = fig.add_subplot(axgrid[3:, :2])
ax1.plot(degree_sequence, "b-", marker="o")
ax1.set_title("Degree Rank Plot")
ax1.set_ylabel("Degree")
ax1.set_xlabel("Rank")

ax2 = fig.add_subplot(axgrid[3:, 2:])
ax2.bar(*np.unique(degree_sequence, return_counts=True))
ax2.set_title("Degree histogram")
ax2.set_xlabel("Degree")
ax2.set_ylabel("Number of Nodes")

fig.tight_layout()
plt.show()


#CALCULO PARAMETROS DISTRIBUCION POWER LAW

N = G.number_of_nodes()
a = 0
for i in range(len(degree_sequence)):
    a = a + np.log((degree_sequence[i]/(min(degree_sequence)-0.5)))
alpha = 1 + N*(1/a)
b = 0
for i in range(len(degree_sequence)):
    b = b + degree_sequence[i]**(-alpha)
C = 1/b

k = np.linspace(0, 15, 15)
d = []
i = 0
for i in range(len(k)):
    value = C * (1/(k[i])**(alpha))
    d.append(value)

plt.plot(d)


#NODO CON EL GRADO MÁXIMO

max_d = pd.DataFrame(G.degree())

list_of_key = list(max_d.iloc[:,0])
list_of_value = list(max_d.iloc[:,1])

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])



'''INDICES DE CENTRALIDAD'''

#EIGENVECTOR
#G
E = nx.eigenvector_centrality(G, max_iter = 1000)

dataE = list(E.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataE, ax = ax, bins = 80)
ax.set_xlabel( "Eigenvector value" , size = 8) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show()

list_of_key = list(E.keys())
list_of_value = list(E.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])


#TIENE EL MÁXIMO EN EL NODO 69

#Gcc
E_Gcc = nx.eigenvector_centrality(Gcc, max_iter = 1000)

dataE = list(E_Gcc.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataE, ax = ax, bins = 80)
ax.set_xlabel( "Eigenvector value" , size = 8 ) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show() 

list_of_key = list(E_Gcc.keys())
list_of_value = list(E_Gcc.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])

#TIENE EL MÁXIMO EN EL NODO 362


#CLOSENESS
#G
C = nx.closeness_centrality(G)

dataC = list(C.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataC, ax = ax, bins = 80)
ax.set_xlabel( "Closeness value" , size = 8 ) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show() 

list_of_key = list(C.keys())
list_of_value = list(C.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])

#TIENE EL MAXIMO EN EL NODO 69

#Gcc
C_Gcc = nx.closeness_centrality(Gcc)

dataC = list(C_Gcc.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataC, ax = ax, bins = 80)
ax.set_xlabel( "Closeness value" , size = 8 ) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show() 

list_of_key = list(C_Gcc.keys())
list_of_value = list(C_Gcc.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])

#TIENE EL MÁXIMO EN EL NODO 69


#BETWENESS
#G
B = nx.betweenness_centrality(G)    

dataB = list(B.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataB, ax = ax, bins = 80)
ax.set_xlabel( "Betweenness value" , size = 8 ) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show() 

list_of_key = list(B.keys())
list_of_value = list(B.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])

#TIENE EL MÁXIMO EN EL NODO 69

#Gcc
B_Gcc = nx.betweenness_centrality(Gcc)    

dataB = list(B_Gcc.values())
fig, ax = plt.subplots(figsize = ( 5 , 3 )) 
sns.histplot(x=dataB, ax = ax, bins = 80)
ax.set_xlabel( "Betweenness value" , size = 8 ) 
ax.set_ylabel( "Numbero de nodos" , size = 8 ) 
plt.show() 

list_of_key = list(B_Gcc.keys())
list_of_value = list(B_Gcc.values())

pos = list_of_value.index(max(list_of_value))
print(list_of_key[pos])

#TIENE EL MÁXIMO EN EL NODO 69
